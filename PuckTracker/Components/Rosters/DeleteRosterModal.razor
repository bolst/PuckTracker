@namespace PuckTracker.Components
@inject NavigationManager navManager

<Button Color="Color.Secondary" TextWeight="TextWeight.Bold" Clicked="ShowModal">DELETE ROSTER</Button>


<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete Roster</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Selection</FieldLabel>
                @if (Rosters is not null && Rosters.Count != 0)
                {
                    <Select @bind-SelectedValue="@selectedTeam">
                        @foreach (Roster roster in Rosters)
                        {
                            <SelectItem Value="@roster.Name">@roster.Name</SelectItem>
                        }
                    </Select>
                }
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="DeleteRoster">Delete Roster</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {


    #region Modal

    private Modal modalRef;

    private Task ShowModal() { return modalRef.Show(); }
    private Task HideModal() { return modalRef.Hide(); }

    #endregion

    string selectedTeam;
    List<Roster>? Rosters = null;
    protected override async Task OnInitializedAsync()
    {
        Rosters = await Api.RosterService.Instance().Rosters();
        if (Rosters.Count != 0)
        {
            selectedTeam = Rosters[0].Name;
        }
    }

    async Task DeleteRoster()
    {
        await HideModal();
        Rosters = await Api.RosterService.Instance().DeleteRoster(selectedTeam);

        navManager.NavigateTo("/redirect?To=rosters");
        // navManager.NavigateTo(navManager.Uri, true);
    }
}